using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;

namespace Tulip
{
    public partial class frmOutstationSummary : Form
    {
        private TulipEntities _context;

        public frmOutstationSummary()
        {
            InitializeComponent();
        }

        private void frmOutstationSummary_Load(object sender, EventArgs e)
        {
           // dataGridViewTextBoxColumn5.ValueType = typeof(String);

            
            _context = new TulipEntities();
            _context.Outstations.Load();
            _context.Channels.Load();
            this.outstationBindingSource.DataSource = _context.Outstations.Local.ToBindingList();
            this.channelBindingSource.DataSource = _context.Channels.Local.ToBindingList();
        }

        private void outstationBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();

            // Currently, the Entity Framework doesn’t mark the entities 
            // that are removed from a navigation property (in our example the Products)
            // as deleted in the context. 
            // The following code uses LINQ to Objects against the Local collection 
            // to find all products and marks any that do not have
            // a Category reference as deleted. 
            // The ToList call is required because otherwise 
            // the collection will be modified 
            // by the Remove call while it is being enumerated. 
            // In most other situations you can do LINQ to Objects directly 
            // against the Local property without using ToList first.
            
            foreach (var ocm in _context.OutstationChannelMappings.Local.ToList())
            {
                if (ocm.Channel == null || ocm.Outstation == null)
                {
                    _context.OutstationChannelMappings.Remove(ocm);
                }
            }

            // Save the changes to the database.
            this._context.SaveChanges();

            // Refresh the controls to show the values         
            // that were generated by the database.
            this.outstationDataGridView.Refresh();
            this.outstationChannelMappingsDataGridView.Refresh();
        }

        private void frmOutstationSummary_FormClosing(object sender, FormClosingEventArgs e)
        {
            _context.Dispose();
        }

        private void outstationChannelMappingsDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void outstationChannelMappingsDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {

            if (e.ColumnIndex == dataGridViewTextBoxColumn5.Index && (e.Value == null || e.Value.Equals("")))
            {
                e.Value = "Unknown";
                e.FormattingApplied = true;
            }
            
        }

        private void outstationChannelMappingsDataGridView_DataError(object sender, DataGridViewDataErrorEventArgs e)
        {
            // TODO : BAD CODE
        }
    }
}
